name: Build Wheels

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Add windows-latest to the build matrix
        os: [ubuntu-latest, macos-latest] # , windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Build wheels
        uses: pypa/cibuildwheel@v3.0.0 # Use the latest version

      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl # cibuildwheel puts wheels in this directory

  # build-wheels:
  #   name: Build wheels on ${{ matrix.os }}
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-latest, macos-latest, windows-latest]
  #       python-version: ['3.9', '3.10', '3.11', '3.12']

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #     with:
  #       submodules: recursive

  #   - name: Set up Python ${{ matrix.python-version }}
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: ${{ matrix.python-version }}

  #   - name: Install build dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install build wheel setuptools pybind11 numpy

  #   - name: Install system dependencies (Linux)
  #     if: runner.os == 'Linux'
  #     run: |
  #       sudo apt-get update
  #       sudo apt-get install -y build-essential

  #   - name: Install system dependencies (macOS)
  #     if: runner.os == 'macOS'
  #     run: |
  #       # macOS dependencies are handled by the build tools

  #   - name: Install system dependencies (Windows)
  #     if: runner.os == 'Windows'
  #     run: |
  #       # Windows dependencies are handled by the build tools

  #   - name: Build wheel
  #     run: |
  #       python -m build --wheel

  #   - name: List built artifacts
  #     run: |
  #       python -c "import os; import glob; files = glob.glob('dist/*'); print('Files in dist/:'); [print(f) for f in files]"

  #   - name: Upload wheel artifacts
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: coxdev-${{ runner.os }}-py${{ matrix.python-version }}
  #       path: dist/*.whl

  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools pybind11 numpy

    - name: Build source distribution
      run: |
        python -m build --sdist

    - name: List built artifacts
      run: |
        python -c "import os; import glob; files = glob.glob('dist/*'); print('Files in dist/:'); [print(f) for f in files]"

    - name: Upload source distribution
      uses: actions/upload-artifact@v4
      with:
        name: source-distribution
        path: dist/*.tar.gz

  # test-wheels:
  #   name: Test wheels
  #   runs-on: ubuntu-latest
  #   needs: [build-wheels, build-sdist]
  #   strategy:
  #     matrix:
  #       python-version: ['3.9', '3.10', '3.11', '3.12']

  #   steps:
  #   - name: Set up Python ${{ matrix.python-version }}
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: ${{ matrix.python-version }}

  #   - name: Download wheel artifacts
  #     uses: actions/download-artifact@v4
  #     with:
  #       pattern: wheels-ubuntu-latest
  #       merge-multiple: true

  #   - name: List downloaded artifacts
  #     run: |
  #       echo "Current directory: $(pwd)"
  #       echo "Directory contents:"
  #       ls -la
  #       echo "Looking for wheel files:"
  #       find . -name "*.whl" -type f
  #       echo "Checking dist directory if it exists:"
  #       ls -la dist/ 2>/dev/null || echo "No dist directory found"

  #   - name: Install wheel
  #     run: |
  #       # Find wheel files in the current directory tree
  #       WHEEL_FILES=$(find . -name "*.whl" -type f)
  #       if [ -n "$WHEEL_FILES" ]; then
  #         echo "Found wheel files: $WHEEL_FILES"
  #         pip install $WHEEL_FILES
  #       else
  #         echo "No wheel files found in the current directory tree"
  #         exit 1
  #       fi

  #   - name: Test installation
  #     run: |
  #       python -c "import coxdev; print('coxdev imported successfully')"
  #       python -c "import coxc; print('coxc extension imported successfully')"

  upload-to-pypi:
    name: Upload to PyPI
    runs-on: ubuntu-latest
    needs: [build-wheels, build-sdist] # , test-wheels]
    if: startsWith(github.ref, 'refs/tags/v')
    # CHANGED: Added permissions for Trusted Publishing
    permissions:
      id-token: write
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: List downloaded artifacts
      run: |
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        echo "Looking for wheel and source files:"
        find . -name "*.whl" -o -name "*.tar.gz" | head -20

    - name: Prepare dist directory
      run: |
        mkdir -p dist
        # Move all wheel and source files to dist/
        find . -name "*.whl" -exec cp {} dist/ \;
        find . -name "*.tar.gz" -exec cp {} dist/ \;
        echo "Files in dist/:"
        ls -la dist/
        echo "File sizes:"
        du -h dist/*

    - name: Validate package metadata
      run: |
        cd dist
        for file in *.whl *.tar.gz; do
          if [ -f "$file" ]; then
            echo "Validating $file:"
            if [[ "$file" == *.whl ]]; then
              python -m zipfile -t "$file" || echo "Invalid wheel file: $file"
            elif [[ "$file" == *.tar.gz ]]; then
              tar -tzf "$file" > /dev/null || echo "Invalid source distribution: $file"
            fi
          fi
        done

    - name: Upload to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      # CHANGED: Removed 'with' block containing the API token
      # The action will now use Trusted Publishing automatically.

  upload-to-test-pypi:
    name: Upload to Test PyPI
    runs-on: ubuntu-latest
    needs: [build-wheels, build-sdist] # , test-wheels]
    if: github.event_name == 'workflow_dispatch'
    # CHANGED: Added permissions for Trusted Publishing
    permissions:
      id-token: write
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: List downloaded artifacts
      run: |
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        echo "Looking for wheel and source files:"
        find . -name "*.whl" -o -name "*.tar.gz" | head -20

    - name: Prepare dist directory
      run: |
        mkdir -p dist
        # Move all wheel and source files to dist/
        find . -name "*.whl" -exec cp {} dist/ \;
        find . -name "*.tar.gz" -exec cp {} dist/ \;
        echo "Files in dist/:"
        ls -la dist/

    - name: Install Twine
      run: python -m pip install --upgrade twine

    - name: Check package distributables
      run: python -m twine check dist/*

    - name: Upload to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        # CHANGED: Removed user/password and updated the URL
        verbose: true
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true