name: Build Wheels

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11']
        exclude:
          # Exclude Python 3.8 on Windows due to compatibility issues
          - os: windows-latest
            python-version: '3.8'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools

    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        # macOS dependencies are handled by the build tools

    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        # Windows dependencies are handled by the build tools

    - name: Build wheel
      run: |
        python -m build --wheel

    - name: Upload wheel artifacts
      uses: actions/upload-artifact@v4
      with:
        name: glmnet-${{ runner.os }}-py${{ matrix.python-version }}
        path: dist/*.whl

  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools

    - name: Build source distribution
      run: |
        python -m build --sdist

    - name: Upload source distribution
      uses: actions/upload-artifact@v4
      with:
        name: source-distribution
        path: dist/*.tar.gz

  test-wheels:
    name: Test wheels
    runs-on: ubuntu-latest
    needs: [build-wheels, build-sdist]
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Download wheel artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: glmnet-Linux-py${{ matrix.python-version }}
        merge-multiple: true

    - name: Install wheel
      run: |
        pip install dist/*.whl

    - name: Test installation
      run: |
        python -c "import glmnet; print('glmnet version:', glmnet.__version__)"
        python -c "from glmnet import GaussNet, LogNet, FishNet; print('Import successful')"

  upload-to-pypi:
    name: Upload to PyPI
    runs-on: ubuntu-latest
    needs: [build-wheels, build-sdist, test-wheels]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Upload to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip-existing: true

  upload-to-test-pypi:
    name: Upload to Test PyPI
    runs-on: ubuntu-latest
    needs: [build-wheels, build-sdist, test-wheels]
    if: github.event_name == 'workflow_dispatch'
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Upload to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        skip-existing: true 